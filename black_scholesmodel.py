# -*- coding: utf-8 -*-
"""Black-ScholesModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ub5AbkRZ6QvO5Jl49NRYuEMAoSwmQM60
"""

import yfinance as yf
import pandas as pd
from datetime import date, datetime,timedelta

"""Import all the essential libraries"""

ticker = input("Enter the ticker of which you would like to view the options: ")
ticker = yf.Ticker(ticker)
current_price = ticker.history(period = '1d')['Close'][0]
options = ticker.options
print(options)

"""loading the underlying intrument's data in this case a stock. We then use the options function to see expiration date.


"""

#Changing the datatype for options so we can substract the option's date to lastTradeDate to get the maturity time.
if options:
  option = ticker.option_chain(options[-1])
datetimee = datetime.strptime(options[-1],"%Y-%m-%d")
today_date = date.today()
expdate = datetimee.date()
maturity = expdate - today_date
total_days = maturity.days
today_years = total_days/365
#saving the option's data in a dataframe.
df = pd.DataFrame(data = option[0])
df.head()

import numpy as np
from scipy.stats import norm
def BlackScholes(St,K,r,t,v,option_type = "call"):
  option_type = option_type.lower()
  St = float(St)
  K = float(K)
  r = float(r)
  t = float(t)
  v = float(v)

  d1 = (np.log(St/K))+(t*(r + 0.5*v**2))/ (v*np.sqrt(t))
  d2 = d1 - v*np.sqrt(t)
  if option_type == "call":
    option_price = norm.cdf(d1)*St - norm.cdf(d2)*K*np.exp(-r*t)
  elif option_type == "put":
    option_price = K*np.exp(-r*t)*norm.cdf(-d2) - St*norm.cdf(-d1)
  return option_price



import yfinance as yf
import pandas as pd

#df['PredictedPrice'] = BlackScholes(St = df.ask,K = df.strike, t= maturity , r = 3.74, v = df.impliedVolatility)
df['PredictedPrice'] = df.apply(lambda row: BlackScholes(St=current_price, K=row['strike'], r=0.0374, t=today_years, v=row['impliedVolatility'], option_type="call"), axis=1)
df.tail()